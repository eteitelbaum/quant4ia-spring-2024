{
  "hash": "609692de12dc909667adba4257e276d3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Summarizing Data\ndate: today\ndate-format: long\nfooter: \"[IAFF 6501 Website](https://quant4ia.rocks)\"\nlogo: images/iaff6501-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    multiplex: true\n    chalkboard: true\n    mermaid:\n      theme: neutral\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n## Group, Summarize and Arrange\n\n<br>\n\n- `group_by()`, `summarize()`, `arrange()`\n- A very common sequence of `dplyr` verbs:\n  - Take an average or some other statistic for a group\n  - Rank from high to low values of summary value\n\n## Setup {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(vdemdata) # to download V-Dem data\nlibrary(dplyr)\n\n# Download the data\ndemocracy <- vdem |> # download the V-Dem dataset\n  filter(year == 2015)  |> # filter year, keep 2015\n  select(                  # select (and rename) these variables\n    country = country_name,     # the name before the = sign is the new name  \n    vdem_ctry_id = country_id,  # the name after the = sign is the old name\n    year, \n    polyarchy = v2x_polyarchy,\n    libdem = v2x_libdem,\n    corruption = v2x_corr,\n    gdp_pc = e_gdppc, \n    region = e_regionpol_6C\n    ) |>\n  mutate(\n    region = case_match(region, # replace the values in region with country names\n                     1 ~ \"Eastern Europe\", \n                     2 ~ \"Latin America\",  \n                     3 ~ \"Middle East\",   \n                     4 ~ \"Africa\", \n                     5 ~ \"The West\", \n                     6 ~ \"Asia\")\n  )\n\n# View the data\nglimpse(democracy)\n```\n:::\n\n  \n## Summarize by Region\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# group_by(), summarize() and arrange()\ndem_summary <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    libdem = median(libdem, na.rm = TRUE),\n    corruption = sd(corruption, na.rm = TRUE),\n    gdp_pc = max(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Print the data\ndem_summary\n```\n:::\n\n\n## Summarize by Region\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  region         polyarchy libdem corruption gdp_pc\n  <chr>              <dbl>  <dbl>      <dbl>  <dbl>\n1 The West           0.876  0.824     0.0647   81.7\n2 Latin America      0.648  0.476     0.281    30.8\n3 Eastern Europe     0.548  0.419     0.292    31.7\n4 Asia               0.443  0.312     0.263    64.8\n5 Africa             0.435  0.261     0.231    30.6\n6 Middle East        0.271  0.171     0.250    91.2\n```\n\n\n:::\n:::\n\n\n##\n\nUse `group_by()` to group countries by region...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\n# group_by(), summarize() and arrange()\ndem_summary <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    libdem = median(libdem, na.rm = TRUE),\n    corruption = sd(corruption, na.rm = TRUE),\n    gdp_pc = max(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Print the data\ndem_summary\n```\n:::\n\n\n##\n\nUse `summarize()` to get the regional means polyarchy and gpd_pc....\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-9\"}\n# group_by(), summarize() and arrange()\ndem_summary <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    libdem = median(libdem, na.rm = TRUE),\n    corruption = sd(corruption, na.rm = TRUE),\n    gdp_pc = max(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Print the data\ndem_summary\n```\n:::\n\n\n## \n\nThen use `arrange()` with `desc()` to sort in descending order by polyarchy score...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"10\"}\n# group_by(), summarize() and arrange()\ndem_summary <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    libdem = median(libdem, na.rm = TRUE),\n    corruption = sd(corruption, na.rm = TRUE),\n    gdp_pc = max(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Print the data\ndem_summary\n```\n:::\n\n\n## \n\nWe are printing the data frame instead of using `glimpse()` here...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"12-13\"}\n# group_by(), summarize() and arrange()\ndem_summary <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    libdem = median(libdem, na.rm = TRUE),\n    corruption = sd(corruption, na.rm = TRUE),\n    gdp_pc = max(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Print the data\ndem_summary\n```\n:::\n\n\n\n## Some Common Arithmetic Functions\n\n<br>\n\n- `sqrt()` square root\n- `log()` natural logarithm\n- `mean()` mean\n- `median()` median\n- `sd()` standard deviation\n\n## Try it Yourself {.scrollable}\n\n- Try running a `group_by()`, `summarize()` and `arrange()` in your Quarto document\n- Try changing the parameters to answer these questions: \n\n1. Try summarizing the data with a [different function](https://dplyr.tidyverse.org/reference/summarise.html#useful-functions) for one or more of the variables. \n  a. What is the median value of `polyarchy` for The West?\n  b. What is the max value of `libdem` for Eastern Europe?\n  c. What is the standard deviation of `corruption` for Africa?\n  d. What is the mean of `gdp_pc` for the Middle East?\n  \n2. Now try grouping by country instead of region. \n\n  a. What is the median value of `polyarchy` for Sweden?\n  b. What is the max value of `libdem` New Zealand?\n  c. What is the standard deviation of `corruption` for Spain?\n  d. What is the interquartile range of `gdp_pc` for Germany?\n\n3. Sort countries in descending order based on the mean value of `gdp_pc` (instead of the median value of `polyarchy`). Which country ranks first based on this sorting?\n\n4. Now try sorting countries in ascending order based on the median value of `libdem` (hint: delete \"desc\" from the `arrange()` call). Which country ranks at the \"top\" of the list?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Visualize It!\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +\n  geom_col(fill = \"steelblue\") + \n  labs(\n    x = \"Region\", \n    y = \"Avg. Polyarchy Score\", \n    title = \"Democracy by region, 2015\", \n    caption = \"Source: V-Dem Institute\"\n    ) + theme_minimal()\n```\n:::\n\n\n## Visualize It!\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-3.2_files/figure-revealjs/barchart2-1.png){width=960}\n:::\n:::\n\n\n## Try it Yourself\n\n- Run the code and a bar chart with the `dem_summary` data you wrangled, again grouping by region (instead of country)\n- Try visualizing different variables, e.g. `libdem`, `corruption`, `gdp_pc`\n- Try different summary statistics, e.g. mean, median, standard deviation, etc.\n- Try grouping by country instead of region and visualizing that\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [
      "week-3.2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}