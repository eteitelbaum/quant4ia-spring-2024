{
  "hash": "90eb9f453cca187981052f0859aebf6d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Merging and Summarizing Data\ndate: today\ndate-format: long\nfooter: \"[IAFF 6501 Website](https://quant4ia.rocks)\"\nlogo: images/dataviz-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: false\n  message: false\n  warning: false\n  freeze: auto\n---\n\n\n# Merging Data\n\n## Merging Data Frames\n\n- Often we have data from two different sources\n- Results in two data frames\n- How to make them one so we can analyze? \n- Key questions\n  - What is the unit of analysis? \n  - What is/are the corresponding identifier variables?\n  - Are the identifier variables in common? \n  - Or do they have to be added/transformed to match?\n  \n## Merging WB and V-Dem Data\n\n- These are both time-series, country-level data\n- Need to merge by country-year\n- Year is easy\n- But there are many different country codes\n- Can use `countrycode` package to assign country codes\n\n## `countrycode` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load countrycode\nlibrary(countrycode)\n\n# Create new iso3c variable\ndemocracy <- democracy |>    \n  mutate(iso3c = countrycode(sourcevar = vdem_ctry_id, # what we are converting\n        origin = \"vdem\",         # we are converting from vdem\n        destination = \"wb\"))  |> # and converting to the WB iso3c code \n  relocate(iso3c, .after = vdem_ctry_id) # move iso3c \n\n# View the data\nglimpse(democracy)\n```\n:::\n\n\n## Try it Yourself\n\n- Using your democracy data frame from the last lesson\n- Use `mutate()` and `countrycode()` to add iso3c country codes\n- Use `relocate` to move your iso3c code to the \"front\" of your data frame (optional)\n\n## Types of Joins in `dplyr`\n\n- Mutating versus filtering joins\n- Four types of mutating joins\n  - `inner_join()`\n  - `full_join()`\n  - `left_join()`\n  - `right_join()`\n- For the most part we will use `left_join()`\n\n## `left_join()` Example\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load readr\nlibrary(readr)\n\n# Perform left join using common iso3c variable and year\ndem_women <- left_join(democracy, women_emp, by = c(\"iso3c\", \"year\")) |> \n  rename(country = country.x) |> # rename country.x\n  select(!country.y)             # crop country.y\n\n# Save as .csv for future use\nwrite_csv(dem_women, \"data/dem_women.csv\")\n\n# View the data\nglimpse(dem_women)  \n```\n:::\n\n\n## Try it Yourself\n\n- Take your V-Dem data frame and your World Bank data frame\n- Using `left_join()` to merge on country code and year\n- Along the way, use `rename()` and `select()` to insure you have just one country name\n\n\n# Group, Summarize and Arrange\n\n## Group, Summarize and Arrange\n\n- `group_by()`, `summarize()`, `arrange()`\n- A very common sequence of `dplyr` verbs:\n  - Take an average or some other statistic for a group\n  - Rank from high to low values of summary value\n  \n## Example: Take Averages by Region\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n##\n\nUse `group_by()` to group all data across countries and years by region...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n##\n\nUse `summarize()` to get the regional means polyarchy and gpd_pc....\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4-7\"}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n## \n\nThen use `arrange()` with `desc()` to sort in descending order by polyarchy score...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"8\"}\n# group_by(), summarize() and arrange()\ndem_region <- democracy |> # save result as new object\n  group_by(region)  |> # group data by region\n  summarize(           # summarize following vars (by region)\n    polyarchy = mean(polyarchy, na.rm = TRUE), # calculate mean, remove NAs\n    gdp_pc = mean(gdp_pc, na.rm = TRUE)\n  ) |> \n  arrange(desc(polyarchy)) # arrange in descending order by polyarchy score\n\n# Save as .csv for future use\nwrite_csv(dem_region, \"data/dem_summary.csv\")\n\n# View the data\nglimpse(dem_summary)\n```\n:::\n\n\n## Try it Yourself {.scrollable}\n\n- Try running a `group_by()`, `summarize()` and `arrange()` in your Quarto document\n- Try changing the parameters to answer these questions: \n\n1. Try summarizing the data with a [different function](https://dplyr.tidyverse.org/reference/summarise.html#useful-functions) for one or more of the variables. \n  a. What is the median value of `polyarchy` for The West?\n  b. What is the max value of `gdp_pc` for Eastern Europe?\n  c. What is the standard deviation of `flfp` for Africa?\n  d. What is the interquartile range of `women_rep` for the Middle East?\n  \n2. Now try grouping by country instead of region. \n\n  a. What is the median value of `polyarchy` for Sweden?\n  b. What is the max value of `gdp_pc` New Zealand?\n  c. What is the standard deviation of `flfp` for Spain?\n  d. What is the interquartile range of `women_rep` for Germany?\n\n3. Sort countries in descending order based on the mean value of `gdp_pc` (instead of the median value of `polyarchy`). Which country ranks first based on this sorting?\n\n4. Now try sorting countries in ascending order based on the median value of `women_rep` (hint: delete \"desc\" from the `arrange()` call). Which country ranks at the \"top\" of the list?\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer1\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0%;right:5%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Choropleth Maps\n\n## Choropleth Maps\n\n<br>\n\n- Choropleth maps are shaded maps that show variation in a variable across geographic space\n- Now that you have a handle on how to merge data, you should be able to make one!\n\n\n::: {.cell}\n\n:::\n\n\n## Choropleth Map\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-4.1_files/figure-revealjs/flfp_map-1.png){width=960}\n:::\n:::\n\n\n## Choropleth Map\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-4.1_files/figure-revealjs/gdp_map-1.png){width=960}\n:::\n:::\n\n\n## The `rnaturalearth` package\n\n- `rnaturalearth` is a package that provides access to shapefiles for countries, states, and provinces\n- Uses the [Natural Earth](https://www.naturalearthdata.com/) dataset which features the \"natural earth\" projection\n- Contrasts with Mercator projection used by Google Maps, etc.\n- Also uses simple features (sf) dataframes \n  - A new way of storing spatial data in R\n  - Allows for easy storage, manipulation and plotting\n\n## Mercator Projection\n\n![*Source:* Wikipedia](images/mercator.jpg){fig-align=center}\n\n## Natural Earth Projection\n\n![*Source:* Wikipedia](images/natural_earth.jpg)\n\n## Simple Features\n\n![](images/simple_feature_dataframe.png){fig-align=center}\n\n## Map Code\n\n<br> \n\nGrab country shapes with `ne_countries()`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\nlibrary(dplyr)\n\nworld_map_df <- ne_countries(scale = \"medium\", returnclass = \"sf\") |>\n    filter(name != \"Antarctica\") # remove Antarctica\n\n#world_map_df |>\n#glimpse()\n\n# view contents of geometry column\nworld_map_df |>\n  select(geometry) \n```\n:::\n\n\n## Basic Choropleth Map\n\n<br>\n\nMake a map using `geom_sf()` from `ggplot2`.\n\n<br>\n\n\n::: {.cell cole-line-numbers='|,4'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(data = world_map_df) +\n  geom_sf(aes(fill = income_grp)) + \n  labs(title = \"World Bank country income categories\")\n```\n:::\n\n\n## \n\nThat gives us...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-4.1_files/figure-revealjs/first_map2-1.png){width=960}\n:::\n:::\n\n\n\n## Beautiful Map\n\n<br>\n\nChange label of legend with `fill=`, add viridis color scheme and change theme with `theme_map()` from `ggthemes`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|7|9|1,10\"}\nlibrary(ggthemes)\n\nggplot(data = world_map_df) +\n  geom_sf(aes(fill = income_grp)) + \n  labs(\n    title = \"World Bank country income categories\",\n    fill = \"Category\"\n    ) +\n    scale_fill_viridis_d() +\n    theme_map() \n```\n:::\n\n\n## \n\nAnd now we have...\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-4.1_files/figure-revealjs/beautify_map2-1.png){width=960}\n:::\n:::\n\n\n## Your Turn!\n\n<br>\n\n- Make a map of WB income categories\n- Grab country shapes and store data in an object\n- Use `geom_sf()` to make the map\n- Style the map with `labs()` and `scale_fill_viridis_d()`\n- Try mapping a different variable (*check on this*)\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer2\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Map Other Data\n\n<br>\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-4.1_files/figure-revealjs/oil_rents1-1.png){width=960}\n:::\n:::\n\n\n## Map Other Data\n\n<br>\n\nGrab data from the WB, join with country shapes...\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1-5|7-8|10-13\"}\n# Load wbstats\nlibrary(wbstats)\n\n# Grab oil rents data\noil_rents_df <- wb_data(c(oil_rents_gdp = \"NY.GDP.PETR.RT.ZS\"), mrnev = 1) \n\n# Join with country shapes\nrents_map_df <- left_join(world_map_df, oil_rents_df, join_by(iso_a3 == iso3c))\n\n# Have a look at the special features column\nrents_map_df |>\n  select(last_col(5):last_col()) |> #select last 5 columns of df\n  glimpse()\n```\n:::\n\n\n## Map Other Data\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|1|2|3-8|9-13|14-17\"}\nggplot(data = rents_map_df) +\n  geom_sf(aes(fill = oil_rents_gdp)) + # shade based on oil rents\n  labs(\n    title = \"Oil rents (% of GDP)\",\n    subtitle = \"(Most recent available data)\", # add subtitle\n    fill = \"Percent\", \n    caption = \"Source: World Bank Development Indicators\"\n    ) +\n  theme_map() +\n  theme(\n    legend.position = \"right\", \n    plot.title = element_text(face = \"bold\"), # move legend\n    ) +\n  scale_fill_viridis_c( # chg from discrete (_d) to continuous (_c)\n      option = \"magma\", #  chg to magma theme\n      labels = scales::label_percent(scale = 1) # add % label for legend\n      ) \n```\n:::\n\n\n## Your Turn! \n\n<br>\n\n- Try mapping a favorite variable from the World Bank\n- First, download the relevant data using `wbstats`\n- Then merge it with your country shapes\n- Map using `geom_sf()`\n- Beautify your map! \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer3\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Map Some V-Dem Data\n\n<br>\n\n- Now try mapping some V-Dem data\n- Remind yourself of how to download data from V-Dem\n- You will have to convert country codes to iso3c\n- Then merge with country shapes\n- Then map your V-Dem indicator!\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:10%;bottom:10%;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [
      "week-4.1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}