{
  "hash": "18eeb714beae0bf7a175ef47ab8e36cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Linear Regression 1\nsubtitle: Estimation\ndate: today\ndate-format: long\nfooter: \"[IAFF 6501 Website](https://quant4ia.rocks/)\"\nlogo: images/iaff6501-logo.png\nformat:\n  revealjs:\n    theme: [simple, custom.scss]\n    transition: fade\n    slide-number: true\n    #multiplex: true\n    chalkboard: true\nexecute:\n  echo: true\n  message: false\n  warning: false\n  freeze: auto\n---\n\n::: {.cell}\n\n:::\n\n\n\n## Linear Model with Single Predictor\n\n<br>\n\nGoal: Estimate Democracy score ($\\hat{Y_{i}}$) of a country given level of GDP per capita ($X_{i}$).\n\n<br>\n\nOr: Estimate relationship between GDP per capita and democracy.\n\n## Linear Model with Single Predictor\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-1-1.png){width=960}\n:::\n:::\n\n\n# Estimate Model using Tidymodels\n\n## \n\n<br>\n\nStep 1: Specify model\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n\n\n:::\n:::\n\n\n## \n\n<br>\n\nStep 2: Set model fitting *engine*\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"lm\") # lm: linear model\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n\n\n:::\n:::\n\n\n## \n\n<br>\n\nStep 3: Fit model & estimate parameters\n\n<bt>\n\n... using **formula syntax**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"lm\") |>\n  fit(lib_dem ~ log_wealth, data = modelData) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = lib_dem ~ log_wealth, data = data)\n\nCoefficients:\n(Intercept)   log_wealth  \n     0.1327       0.1197  \n```\n\n\n:::\n:::\n\n\n## \n\n<br>\n\nStep 4: Tidy things up...\n\n<br>\n\n$$\\widehat{Democracy}_{i} = 0.13 + 0.12 * {loggdppc}_{i}$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"lm\") |>\n  fit(lib_dem ~ log_wealth, data = modelData) |>\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)    0.133    0.0380      3.49 6.04e- 4\n2 log_wealth     0.120    0.0147      8.16 6.97e-14\n```\n\n\n:::\n:::\n\n\n\n## Interpretation?\n\n<br>\n\n$$\\widehat{Democracy}_{i} = 0.13 + 0.12 * {loggdppc}_{i}$$\n\n## Question\n\n<br>\n\nHow do we get the \"best\" values for the slope and intercept?\n\n\n## How would you draw the \"best\" line?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n## How would you draw the \"best\" line?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n## Least squares regression\n\n<br>\n\n- Remember the residual is the difference between the actual value and the predicted value\n\n. . .\n\n- The regression line minimizes the sum of squared residuals.\n\n## Least squares regression\n\n<br>\n\n- Residual for each point is:  $e_i = y_i - \\hat{y}_i$\n\n- Least squares regression line minimizes $\\sum_{i = 1}^n e_i^2$.\n\n. . .\n\n- Why do we square the residual?\n\n. . .\n\n- Why not take absolute value?\n\n    - Principle: larger penalty for residuals further away\n    - Math: makes the math easier and some nice properties (not our concern here...)\n\n## Least squares regression\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-6-1.png){width=60%}\n:::\n:::\n\n\n## Very Simple Example\n\nWhat should the slope and intercept be?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n\n## Example\n\n$\\hat{Y} = 0 + 1*X$\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Example\n\nWhat is the sum of squared residuals?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n\n## Example\n\nWhat is sum of squared residuals for $y = 0 + 0*X$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n\n## Example\n\nWhat is sum of squared residuals for $y = 0 + 0*X$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-11-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(1-0)^2 + (2-0)^2 + (3-0)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n:::\n\n\n\n\n## Example\n\nWhat is sum of squared residuals for $y = 0 + 2*X$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-13-1.png){width=960}\n:::\n:::\n\n\n## Example\n\nWhat is sum of squared residuals for $y = 0 + 2*X$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-14-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(1-2)^2 + (2-4)^2 + (3-6)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n:::\n\n\n\n## One more...\n\nWhat is sum of squared residuals for $y = 0 + -1*X$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## One more...\n\n\nWhat is sum of squared residuals for $y = 0 + -1*X$?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-17-1.png){width=960}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(1+1)^2 + (2+2)^2 + (3+3)^2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 56\n```\n\n\n:::\n:::\n\n\n\n\n## Cost Function\n\nSum of Squared Residuals as function of possible values of $b$\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n## Least Squares Regression\n\n<br>\n\n- When we estimate a least squares regression, it is looking for the line that minimizes sum of squared residuals\n\n- In the simple example, I set $a=0$ to make it easier.  More complicated when searching for combination of $a$ and $b$ that minimize, but same basic idea\n\n## Least Squares Regression\n\n<br>\n\n- There is a way to solve for this analytically for linear regression (i.e., by doing math...)\n\n    -- They made us do this in grad school...\n\n. . .\n\n- In machine learning, people also use gradient descent algorithm in which the computer searches over possible combinations of $a$ and $b$ until it settles on the lowest point.    \n\n\n## Least Squares Regression\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n## Least Squares Regression\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n## Your Turn {.smaller}\n\n<br>\n\nAre democracies less corrupt?\n\n<br>\n\n- V-Dem includes a Political Corruption Index, which aggregates corruption in a number of spheres (see codebook for details).  \n\n- The variable name is: *v2x_corr* : lower values mean less corruption\n\n- See started code [HERE](https://www.dropbox.com/scl/fo/iwmhtr6dz8u3b14ctjrkw/h?rlkey=izxf8b2xftwtb0ewfij4psxh7&dl=0)\n\n\n## Your Turn {.smaller}\n\n<br>\n\n**Are democracies less corrupt?**\n\n<br>\n\n::: {.smaller}\n- Filter the V-Dem data to only include the year 2019\n- Make a scatterplot to visualize the relationship between democracy (X) and corruption (Y) (use the *v2x_libdem* variable for democracy)\n- Fit a linear model\n- Interpret results for the slope and intercept\n- For a country with the average (mean) level of democracy, what is the predicted level of corruption?\n:::\n\n# Models with Categorical Explanatory Variables\n\n## Judicial Review and Democracy\n\n<br>\n\n**Judicial Review:**\n\n- Do high courts (Supreme Court, Constitutional Court, etc) have the power to rule on whether laws or policies are constitutional/legal? (Yes or No)\n- Dimension of Judicial Independence\n\n## Judicial Review and Democracy\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-22-1.png){width=960}\n:::\n:::\n\n\n## Judicial Review and Democracy\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() %>%\n  set_engine(\"lm\") %>%\n  fit(lib_dem ~ factor(judicial_review), data = modelData) %>%\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  term                     estimate std.error statistic  p.value\n  <chr>                       <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)                 0.223    0.0566      3.94 0.000119\n2 factor(judicial_review)1    0.205    0.0600      3.41 0.000812\n```\n\n\n:::\n:::\n\n\n## Judicial Review and Democracy\n\n\n$$\\widehat{Democracy_{i}} = 0.22 - 0.20*JudicialReview(yes)$$\n\n- **Slope:** Countries with judicial review are expected, on average, to be 0.20 units more democratic on the liberal democracy index\n  - Compares baseline level (Judicial Review = 0) to the other level (Judicial Review = 1)\n- **Intercept:** Countries without judicial review are, on average, a 0.22 on liberal democracy scale \n\n\n## Dummy Variables\n\n<br>\n\n- When the categorical explanatory variable has many levels, they're encoded to **dummy variables** \n- We always leave one category out of the model, as the omitted reference category\n- Each coefficient describes is the expected difference between level of the factor **and the baseline level**\n- Everything is relative to the omitted reference category\n\n## Democracy and World Region\n\n<br>\n\nDoes region predict levels of democracy?\n\nSince Eastern Europe is the first category, default in R is to use that as the omitted category in models.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(modelData$region)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Eastern Europe\"                   \"Latin America\"                   \n[3] \"MENA\"                             \"SSAfrica\"                        \n[5] \"Western Europe and North America\" \"Asia and Pacific\"                \n```\n\n\n:::\n:::\n\n\n## Democracy and World Region\n\n<br>\n\nHow should we interpret intercept?  How about the coefficient on Latin America?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() %>%\n  set_engine(\"lm\") %>%\n  fit(lib_dem ~ region, data = modelData) %>%\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  term                                   estimate std.error statistic  p.value\n  <chr>                                     <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)                              0.425     0.0355    12.0   2.12e-24\n2 regionLatin America                      0.0433    0.0527     0.822 4.12e- 1\n3 regionMENA                              -0.235     0.0554    -4.24  3.63e- 5\n4 regionSSAfrica                          -0.129     0.0448    -2.88  4.42e- 3\n5 regionWestern Europe and North America   0.374     0.0533     7.01  5.04e-11\n6 regionAsia and Pacific                  -0.0797    0.0512    -1.56  1.21e- 1\n```\n\n\n:::\n:::\n\n\n## Democracy and World Region\n\nWhat if you want a different baseline category? How do we interpret now?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make SS Africa the reference category\nmodelData <- modelData %>% \nmutate(newReg = relevel(region, ref=4)) \n\nlinear_reg() %>%\n      set_engine(\"lm\") %>%\n      fit(lib_dem ~ newReg, data = modelData) %>%\n      tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  term                                   estimate std.error statistic  p.value\n  <chr>                                     <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)                              0.296     0.0273     10.8  3.02e-21\n2 newRegEastern Europe                     0.129     0.0448      2.88 4.42e- 3\n3 newRegLatin America                      0.173     0.0475      3.63 3.73e- 4\n4 newRegMENA                              -0.106     0.0505     -2.09 3.78e- 2\n5 newRegWestern Europe and North America   0.503     0.0482     10.4  4.27e-20\n6 newRegAsia and Pacific                   0.0495    0.0458      1.08 2.81e- 1\n```\n\n\n:::\n:::\n\n\n\n\n## Your Turn\n\n<br>\n\n**Which types of regime have more corruption?**\n\n<br>\n \nV-Dem also includes a categorial regime variable: Closed autocracy (0), Electoral Autocracy (1), Electoral Democracy (2), Liberal Democracy (3)\n\n## Your Turn\n\n<br>\n\n**Which types of regime have more corruption?**\n\n<br>\n\n \nFirst, let's make this an easier factor variable to work with\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make nicer regime factor variable\nmodelData <- modelData %>% \n  mutate(regime = factor(regime,\n                         labels = c(\"Closed autocracy\",\n                                   \"Electoral Autocracy\",\n                                  \"Electoral Democracy\",\n                                  \"Liberal Democracy\")))\nlevels(modelData$regime)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Closed autocracy\"    \"Electoral Autocracy\" \"Electoral Democracy\"\n[4] \"Liberal Democracy\"  \n```\n\n\n:::\n:::\n\n\n## Your Turn {.smaller}\n\n<br>\n\n**Which types of regime have more corruption?**\n\n<br>\n\n- Filter data to include only the year 2019 (or run the code to use modelData)\n- Make a plot to visualize the relationship between regime type and level of corruption.  Which kind of plot is best in this situation?\n- Fit a linear model\n- Interpret the intercept and coefficients\n\n\n## Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodelData %>% \n  group_by(regime) %>% \n  summarize(corr = mean(corruption)) %>% \n  ggplot(., aes(y=corr, x = regime)) +\n    geom_col(fill=\"steelblue\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](week-9.2_files/figure-revealjs/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n## Model\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() %>%\n      set_engine(\"lm\") %>%\n      fit(corruption ~ regime, data = modelData) %>%\n      tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  term                      estimate std.error statistic  p.value\n  <chr>                        <dbl>     <dbl>     <dbl>    <dbl>\n1 (Intercept)                 0.575     0.0420     13.7  1.80e-29\n2 regimeElectoral Autocracy   0.124     0.0490      2.54 1.19e- 2\n3 regimeElectoral Democracy  -0.0854    0.0503     -1.70 9.11e- 2\n4 regimeLiberal Democracy    -0.469     0.0529     -8.87 8.43e-16\n```\n\n\n:::\n:::\n\n\n# Questions?\n\n      ",
    "supporting": [
      "week-9.2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}