---
title: "Making Tables"
date: today
date-format: long
footer: "[DataViz 2102 Website](https://dataviz-gwu.rocks)"
logo: images/dataviz-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    multiplex: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

```{r}
#| label: setup
#| include: false

library(stringr)
library(dplyr)
library(gt)
library(tidycensus)

my_api_key = Sys.getenv("census_api_key")
census_api_key(my_api_key)


v21 <- load_variables(2021, "acs5", cache = TRUE)

quintiles <- get_acs(geography = "state", 
                      variables = c(q1 = "B19081_001",
                                    q2 = "B19081_002",
                                    q3 = "B19081_003",
                                    q4 = "B19081_004",
                                    q5 = "B19081_005",
                                    top5 = "B19081_006"),
                      year = 2021,
                      output = "wide") |>
                      select(
                        !ends_with("M"), # eliminate margin of error
                        -GEOID) |> # eliminate geo id
                      rename(name = NAME) |>
                      rename_with(~str_remove(., 'E'))

# lowest 
state_min <- quintiles |> 
  slice_min(q1) 

# highest
state_max <- quintiles |> 
  slice_max(top5) 

# randomly select five more
five_more <- quintiles |>
   slice_sample(n = 5) 

states <- bind_rows(state_min, state_max, five_more) |>
  arrange(desc(top5))

awesometable <- gt(states) |> 
  tab_header(
    title = "Mean Household Income of Quintiles, 2021",
    subtitle = "Seven Representative U.S. States"
  ) |> 
  cols_label(
    name = "",
    q1 = "lowest",
    q2 = "second",
    q3 = "third",
    q4 = "fourth",
    q5 = "highest",
    top5 = "top 5%"
  ) |> 
  
  fmt_currency(
    columns = c(q1:top5),
    currency = "USD", 
    use_subunits = FALSE
  ) |>
  
  # note that you can use markdown (md) to format the source note for html documents
  tab_source_note(source_note = md("**Source**: US Census Bureau, American Community Survey")) |>
  
  cols_width(c(q1:top5) ~ px(90)) |>
  
  opt_table_font(font = "verdana") |>
  cols_align(
  align = "center",
  columns = q1:top5
) |>
  tab_options(
    table.border.top.color = "black", 
    table.border.bottom.color = "black",
    heading.border.bottom.color = "black", 
    column_labels.border.bottom.color = "black", 
    table_body.border.bottom.color = "black"
  )
```

## Why Tables?

<br>

::: incremental
-   Summary statistics
-   Precise values (for small number of cases)
-   Regression tables
:::

## Awesome Table

<br>

```{r}
awesometable
```

## When Not to Use Tables?

<break>

::: {.incremental}
- To show a trend 
- Display a relationship
- Lots of values
- Few values but column chart is better
:::

## The Grammar of Tables

![](images/gt_parts_of_a_table.svg)

## Prep

- Do the prework for the module
- Get a census [API key](https://api.census.gov/data/key_signup.html)

## Set API key

<br>

```{r}
#| echo: true
#| eval: false

library(tidycensus)
census_api_key("YOUR API KEY") # enter your census api key here in quotes
```

## Load Variables

<br>

Search for "quintile"...

<br>

```{r}
#| echo: true
#| output: false

v21 <- load_variables(2021, "acs5", cache = TRUE)

#View(v21)
```

## Clean the Data

```{r}
#| echo: true
#| output: false

library(stringr)
library(dplyr)

quintiles <- get_acs(geography = "state", 
                      variables = c(q1 = "B19081_001",
                                    q2 = "B19081_002",
                                    q3 = "B19081_003",
                                    q4 = "B19081_004",
                                    q5 = "B19081_005",
                                    top5 = "B19081_006"),
                      year = 2021,
                      output = "wide") |>
                      select(
                        !ends_with("M"), # eliminate margin of error
                        -GEOID) |> # eliminate geo id
                      rename(name = NAME) |>
                      rename_with(~str_remove(., 'E'))
    

glimpse(quintiles)
```

```{r}
#| label: setup_timer
library(countdown)
countdown(minutes = 10, 
          id = "setup", 
          #bottom = "10%", 
          #right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

## kableExtra Table {.smaller}

```{r}
library(kableExtra)

top_10 <- quintiles |>
  slice_max(top5, n = 10)

kable(top_10)
```

## kableExtra Table

<br>

```{r}
#| echo: true
#| output: false

top_10 <- quintiles |>
  slice_max(top5, n = 10)

kable(top_10)
```

## Issues with this table? {.smaller}

```{r}
kable(top_10)
```

## Let's make a `gt` table

Create `states` data frame... 

```{r}
#| echo: true
#| eval: false

# lowest 
state_min <- quintiles |> 
  slice_min(q1) 

# highest
state_max <- quintiles |> 
  slice_max(top5) 

# randomly select five more
five_more <- quintiles |>
   slice_sample(n = 5) 

states <- bind_rows(state_min, state_max, five_more) |>
  arrange(desc(top5))
```

```{r}
countdown(minutes = 5, 
          id = "states_df") 
```

## Let's make a `gt` table

<br>

```{r}
#| echo: true
library(gt)
gt(states)
```

## Let's make a good `gt` table

<br>

```{r}
goodtable <- gt(states) |> 
  tab_header(
    title = "Mean Household Income of Quintiles, 2021",
    subtitle = "Seven Representative U.S. States"
  ) |> 
  cols_label(
    name = "",
    q1 = "lowest",
    q2 = "second",
    q3 = "third",
    q4 = "fourth",
    q5 = "highest",
    top5 = "top 5%"
  ) |> 
  fmt_currency(
    columns = c(q1:top5),
    currency = "USD", 
    use_subunits = FALSE
  ) |>
  # note that you can use markdown (md) to format the source note for html documents
  tab_source_note(source_note = md("**Source**: US Census Bureau, American Community Survey"))

goodtable
```

## Let's make a good `gt` table

```{r}
#| echo: true
#| eval: false

goodtable <- gt(states) |> 
  tab_header(
    title = "Mean Household Income of Quintiles, 2021",
    subtitle = "Seven Representative U.S. States"
  ) |> 
  cols_label(
    name = "",
    q1 = "lowest",
    q2 = "second",
    q3 = "third",
    q4 = "fourth",
    q5 = "highest",
    top5 = "top 5%"
  ) |> 
  fmt_currency(
    columns = c(q1:top5),
    currency = "USD", 
    use_subunits = FALSE
  ) |>
  # note that you can use markdown (md) to format the source note for html documents
  tab_source_note(source_note = md("**Source**: US Census Bureau, American Community Survey"))

goodtable
```

```{r}
countdown(minutes = 10, 
          id = "goodtable") 
```

## Change Colum Width

```{r}
vgoodtable <- goodtable |>
  cols_width(c(q1:top5) ~ px(90))

vgoodtable
```

## Change Colum Width

```{r}
#| echo: true
#| eval: false 

vgoodtable <- goodtable |>
  cols_width(c(q1:top5) ~ px(90))

vgoodtable
```

## Change Font

```{r}
greattable <- vgoodtable |>
  opt_table_font(font = "verdana")

greattable
```

## Change Font

```{r}
#| echo: true
#| eval: false

greattable <- vgoodtable |>
  opt_table_font(font = "verdana")

greattable
```

## Center

```{r}
#| label: center
vgreattable <- greattable |>
  cols_align(
  align = "center",
  columns = q1:top5
)

vgreattable
```

## Center

```{r}
#| echo: true
#| eval: false

vgreattable <- greattable |>
  cols_align(
  align = "center",
  columns = q1:top5
)

vgreattable
```

## Add Borders and Lines

```{r}
#| label: nolines
awesometable <- vgreattable |>
  tab_options(
    table.border.top.color = "black", 
    table.border.bottom.color = "black",
    heading.border.bottom.color = "black", 
    column_labels.border.bottom.color = "black", 
    table_body.border.bottom.color = "black"
  )

awesometable
```



## Add Borders and Lines

```{r}
#| echo: true
#| eval: false

awesometable <- vgreattable |>
  tab_options(
    table.border.top.color = "black", 
    table.border.bottom.color = "black",
    heading.border.bottom.color = "black", 
    column_labels.border.bottom.color = "black", 
    table_body.border.bottom.color = "black"
  )

awesometable
```

## Export Table

```{r}
#| echo: true
#| eval: false

gtsave(awesometable, "awesometable.png")
```

