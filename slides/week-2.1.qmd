---
title: Bar Charts and Histograms
date: today
date-format: long
footer: "[IAFF 6501 Website](https://quant4ia.rocks)"
logo: images/dataviz-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    #multiplex: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

# Reading Data into R

## Getting Started with Data {.smaller}

<br>

::: {.incremental}
- *Tabular data* is data that is organized into rows and columns
  - a.k.a. *rectangular data*
- A *data frame* is a special kind of tabular data used in data science
- A *variable* is something you can measure 
- An *observation* is a single unit or case in your data set
- The *unit of analysis* is the level at which you are measuring
  - In a cross-section: country, state, county, city, individual, etc.
  - In a time-series: year, month, day, etc.
:::

## Example

![](images/tidy_data.jpg){fig-align="center"}

## Some Basic R Code {.smaller}

<br>

::: {.incremental}
- `<-` is the assignment operator
  - Use it to assign values to objects
- `#` is the comment operator
  - Use it to comment out code or add comments
  - Different function than in markdown text
- To call a library, use `library()` and name of library
  - name of library does not have to be in quotes, e.g. `library(readr)`
  - only when you install it, e.g. `install.packages("readr")`
:::

## Read Data into R

<br>

```{r}
#| label: read_data1
#| echo: true
#| eval: false
#| code-line-numbers: "|1|2-3|5"

# load libraries
library(readr)
library(dplyr)

dem_summary <- read_csv("data/dem_summary.csv")
```

## Viewing the Data in R

<br>

Use `glimpse()` to see the columns and data types:

```{r}
#| label: read_data2
#| echo: true
#| code-line-numbers: "7"

# load libraries
library(readr)
library(dplyr)

dem_summary <- read_csv("data/dem_summary.csv")

glimpse(dem_summary)
```

# 

Or use `View()` or click on the name of the object in your Environment tab to see the data in a spreadsheet:

![](images/view_df.gif){fig-align="center"}

## Try It Yourself!

- Open the CSV file to see what it looks like
- Then use this code to read it into R and view it

```{r}
#| label: read_data3
#| echo: true
#| eval: false

# load libraries
library(readr)
library(dplyr)

dem_summary <- read_csv("data/dem_summary.csv")

glimpse(dem_summary)
```

```{r}
#| label: timer1
library(countdown)
countdown(minutes = 5, 
          id = "timer1", 
          bottom = "10%", 
          right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

# Bar Charts

## The Grammar of Graphics

::: {.incremental}
- Data viz has a language with its own grammar
- Basic components include:
  - Data we are trying to visualize
  - Aesthetics (dimensions)
  - Geom (e.g. bar, line, scatter plot)
  - Color scales
  - Themes
  - Annotations
::: 
  
## 

<br>

Let's start with the first two, the data and the aesthetic...

<br>

```{r}
#| label: barchart1
#| echo: true
#| output: false
#| code-line-numbers: "6"

library(readr)
library(ggplot2)

dem_summary <- read_csv("data/dem_summary.csv")

ggplot(dem_summary, aes(x = region, y = polyarchy)) 
```

##

This gives us the axes without any visualization:

```{r}
#| label: barchart2

ggplot(dem_summary, aes(x = region, y = polyarchy)) 
```


##

<br>

Now let's add a geom. In this case we want a bar chart so we *add* `geom_col()`.

<br>

```{r}
#| label: barchart3
#| echo: true
#| output: false

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col()
```

## 

That gets the idea across but looks a little depressing, so...

```{r}
#| label: barchart4

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col()
```

## 

<br>

...let's change the color of the bars by specifying `fill = "steelblue"`.

<br>

```{r}
#| label: barchart5
#| echo: true
#| output: false
#| code-line-numbers: "2"

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue")
```

## 

Note how color of original bars is simply overwritten:

```{r}
#| label: barchart6

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue")
```

## 

<br>

Now let's *add* some labels with the `labs()` function:

<br>

```{r}
#| label: barchart7
#| echo: true
#| output: false
#| code-line-numbers: "3-8"

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue") +
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## 

And that gives us... 

```{r}
#| label: barchart8

ggplot(dem_summary, aes(x = region, y = polyarchy)) + 
  geom_col(fill = "steelblue") +
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## 

Next, we reorder the bars with `fct_reorder()` from the `forcats` package. 

<br>

```{r}
#| label: barchart9
#| echo: true
#| output: false
#| code-line-numbers: "1"

library(forcats)

ggplot(dem_summary, aes(x = fct_reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

<br> 

Note that we could also use the base R `reorder()` function here.

## 

This way, we get a nice, visually appealing ordering of the bars according to levels of democracy...

```{r}
#| label: barchart10

ggplot(dem_summary, aes(x = fct_reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

## 

<br>

Now let's change the theme to `theme_minimal()`. 

<br>

```{r}
#| label: barchart11
#| echo: true
#| output: false
#| code-line-numbers: "8"

ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    ) + theme_minimal()
```

## 

Gives us a clean, elegant look. 

```{r}
#| label: barchart12

ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue") + 
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    ) + theme_minimal()
```


##

<br>

Note that you can also save your plot as an object to modify later.

<br>

```{r}
#| label: barchart13
#| echo: true
#| output: false

dem_bar_chart <- ggplot(dem_summary, aes(x = reorder(region, -polyarchy), y = polyarchy)) +
  geom_col(fill = "steelblue")
```

##

Which gives us...

```{r}
#| label: barchart14
#| echo: true
 
dem_bar_chart
```

## 

<br> 

Now let's add back our labels... 

<br>

```{r}
#| label: barchart15
#| echo: true
#| output: false

dem_bar_chart <- dem_bar_chart +
  labs(
    x = "Region", 
    y = "Avg. Polyarchy Score", 
    title = "Democracy by region, 1990 - present", 
    caption = "Source: V-Dem Institute"
    )
```

##

So now we have... 

```{r}
#| label: barchart16
#| echo: true

dem_bar_chart
```

## 

<br> 

And now we'll add back our theme...

<br>

```{r}
#| label: barchart17
#| echo: true
#| output: false

dem_bar_chart <- dem_bar_chart + theme_minimal()
```

##

Voila! 

```{r}
#| label: barchart18
#| echo: true

dem_bar_chart
```

##

Change the theme. There are many [themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) to choose from.

```{r}
#| label: barchart19
#| echo: true

dem_bar_chart + theme_bw()
```

## Your Turn!

1. `glimpse()` the data
2. Find a new variable to visualize
3. Make a bar chart with it
4. Change the [color](http://sape.inf.usi.ch/quick-reference/ggplot2/colour) of the bars
5. Order the bars
6. Add labels
7. Add a [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html)
8. Try saving your plot as an object
9. Then change the labels and/or theme

```{r}
#| label: timer2
countdown::countdown(minutes = 10, id = "timer2")
```

# Histograms

## Purpose of Histograms

- Histograms are used to visualize the distribution of a single variable
- They are used for continuous variables (e.g., income, age, etc.)
- A *continuous* variable is one that can take on any value within a range (e.g., 0.5, 1.2, 3.7, etc.)
- A *discrete* variable is one that can only take on certain values (e.g., 1, 2, 3, etc.)
- x-axis represents value of variable of interest
- y-axis represents the frequency of that value

## Example

```{r}
#| label: histogram1

# load data
dem_women <- read_csv("data/dem_women.csv")

# filter to 2022
dem_women_2022 <- dem_women |>
  filter(year == 2022) 

# create histogram
ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

## Histogram Code

<br>

```{r}
#| label: histogram2
#| echo: true
#| eval: false
#| code-line-numbers: "|1-2|4-6|8-10"

# load data
dem_women <- read_csv("data/dem_women.csv")

# filter to 2022
dem_women_2022 <- dem_women |>
  filter(year == 2022) 

# create histogram
ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

## Change Number of Bins

<br>

Change number of bins (bars) using `bins` or `binwidth` arguments (default number of bins = 30):

<br>

```{r}
#| label: histogram3
#| echo: true
#| eval: false
#| code-line-numbers: "2"

ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(bins = 50, fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

##

At 50 bins...

```{r}
#| label: histogram4

ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(bins = 50, fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

##

At 100 bins...probably too many!

```{r}
#| label: histogram5

ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(bins = 100, fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

## 

<br>

Using `binwidth` instead of `bins`... 

<br>


```{r}
#| label: histogram6
#| echo: true
#| eval: false
#| code-line-numbers: "2"

ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(binwidth = 2, fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

##

Setting `binwidth` to 2...

```{r}
#| label: histogram7

ggplot(dem_women_2022, aes(x = flfp)) +
  geom_histogram(binwidth = 2, fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Number of Countries",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

## Change from Count to Density

<br>

```{r}
#| label: histogram8
#| echo: true
#| eval: false
#| code-line-numbers: "1,5"


ggplot(dem_women_2022, aes(after_stat(density), x = flfp)) +
  geom_histogram(fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Density",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

## 

Which gives us... 

```{r}
#| label: histogram9

ggplot(dem_women_2022, aes(after_stat(density), x = flfp)) +
  geom_histogram(fill = "steelblue") + 
  labs(
    x = "Percentage of Working Aged Women in Labor Force",
    y = "Density",
    title = "Female labor force participation rates, 2022",
    caption = "Source: World Bank"
    ) + theme_minimal()
```

## Your Turn!

1. Pick a variable that you want to explore the distribution of
2. Make a histogram
    a. Only specify `x = ` in `aes()`
    b. Specify geom as `geom_histogram`
3. Choose color for bars
4. Choose appropriate labels
5. Change number of bins
6. Change from count to density

```{r}
#| label: timer3
countdown::countdown(minutes = 10, id = "timer3")
```

