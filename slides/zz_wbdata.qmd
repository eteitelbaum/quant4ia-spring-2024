---
title: World Bank Data
date: today
date-format: long
footer: "[IAFF 6501 Website](https://quant4ia.rocks)"
logo: images/iaff6501-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    #multiplex: true
    chalkboard: true
---

## Searching for WB Indicators

<br>

```{r}
#| label: search_wb
#| eval: false
#| echo: true

# Load the wbstats package
library(wbstats)

# store the list of indicators
flfp_indicators <- wb_search("female labor force") 

# view the indicators
print(flfp_indicators,n = 26) 
```

## Searching for WB Indicators

<br>

Sometimes it is easier to search using the [WDI website](https://databank.worldbank.org/source/world-development-indicators#).
  
## Try it Yourself

- Start a new Quarto document
- Start a new code chunk
- Load the `wbstats` package
- Use `wb_search()` to find some indicators you are interested in
- Compare with a manual search on the [WDI website](https://databank.worldbank.org/source/world-development-indicators#) 

```{r}
#| label: time1

library(countdown)

countdown(minutes = 5, 
          id = "timer1", 
          bottom = "10%", 
          right = "10%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

## The `wbdata()` Function

<br>

Store the list of indicators you want in an object and then use `wb_data()` to download the data:

```{r}
#| label: use_wbdata
#| eval: false
#| echo: true

# load dplyr 
library(dplyr) 

# store the list of indicators in an object
indicators <- c("flfp" = "SL.TLF.CACT.FE.ZS", "women_rep" = "SG.GEN.PARL.ZS") 

# download the data 
women_emp <- wb_data(indicators, mrv = 50) # download data for last 50 yrs

# glimpse the data
glimpse(women_emp)
```

## Some Functions for Wrangling Data {.smaller}

- From `dplyr`
  - `filter()` to filter observations (rows)
  - `select()` to select or drop variables (columns)
  - `mutate()` to create new variables or modify existing ones
  - `rename()` to rename variables
  - `case_match()` to recode variables
- From the `janitor` package
  - `clean_names()` (used earlier)
  - `round_to_fraction()` to round to nearest fraction

## Cleaning the WB Data

<br>

Use `select()` to drop iso2c variable and `rename()` to rename date to year:

```{r}
#| label: mutate_women_emp
#| eval: false
#| echo: true
#| code-line-numbers: "|6|7"

# Load janitor
library(janitor) 

# Download the data  
women_emp <- women_emp |> 
  select(!iso2c) |> # drop the iso2c code which we won't be using
  rename(year = date) |> # rename date to year 
  mutate(
    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th
    women_rep = round_to_fraction(women_rep, denominator = 100) 
  )

# View the data
glimpse(women_emp) 
```

## Cleaning the WB Data

<br>

Use `mutate()` and `round_to_fraction` to round the `flfp` and `women_rep` variables to the nearest 100th:

```{r}
#| label: round_variables
#| eval: false
#| echo: true
#| code-line-numbers: "2,8-11"

# Load janitor
library(janitor) 

# Download the data  
women_emp <- women_emp |> 
  select(!iso2c) |> # drop the iso2c code which we won't be using
  rename(year = date) |> # rename date to year 
  mutate(
    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th
    women_rep = round_to_fraction(women_rep, denominator = 100) 
  )

# View the data
glimpse(women_emp) 
```

## Or Do it All in One Go

<br> 

```{r}
#| label: one_go_no_highlight
#| eval: false
#| echo: true
#| code-line-numbers: "|5-9"

# load th4e packages
library(janitor)
library(dplyr)

# store the list of indicators in an object
indicators <- c("flfp" = "SL.TLF.CACT.FE.ZS", "women_rep" = "SG.GEN.PARL.ZS") 

# Download the data  
women_emp <- wb_data(indicators, mrv = 50) |> # download data for last 50 yrs
  select(!iso2c) |> # drop the iso2c code which we won't be using
  rename(year = date) |> # rename date to year 
  mutate(
    flfp = round_to_fraction(flfp, denominator = 100), # round to nearest 100th
    women_rep = round_to_fraction(women_rep, denominator = 100) 
  )

# View the data
glimpse(women_emp) 
```

## Try it Yourself

<br>

- Using the variables you identified in your search, download the data
- Think about what elements of the code you need to change
- Hint: the indicators are going to change!

```{r}
#| label: timer2

countdown(minutes = 10, 
          id = "timer2", 
          bottom = "10%", 
          right = "10%")
```


execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---


