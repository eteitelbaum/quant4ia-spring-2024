---
title: Getting Started
subtitle: RStudio and Basic Quarto
date: today
date-format: long
footer: "[IAFF 6501 Website](https://quant4ia.rocks)"
logo: images/iaff6501-logo.png
format:
  revealjs:
    theme: [simple, custom.scss]
    transition: fade
    slide-number: true
    #multiplex: true
    chalkboard: true
execute:
  echo: false
  message: false
  warning: false
  freeze: auto
---

# R Studio

## Set up RStudio {.smaller}

-   Go to Tools\>Global Options
-   Under Code, enable native pipe operator (`|>`)
-   Under Appearance, choose a theme
-   Configure panes
    -   Go to Pane Layout
    -   Move Source, Console, etc. to preferred positions
-   Install the Tidyverse group of packages from the console
    -   `install.packages("tidyverse")`
-   Install `devtools`
    -   `install.packages("devtools")`)
-   Install tinytex (for PDF rendering)
    - Go to your terminal and type `quarto install tinytex`

```{r}
#| label: timer1

library(countdown)
countdown(minutes = 2, 
          id = "timer1", 
          top = "0%",
          right = "5%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

# Quarto

## Quarto

<br>

::: {.incremental}
-   [Quarto](https://quarto.org/) is an open-source scientific publishing platform
-   Allows you to integrate text with code
-   Kind of like a word processor for data science
-   Can use it to create reports, books, websites, etc.
-   Can make HTML, PDF, Word, and other formats
-   Can use R, Python, Julia, and other languages
:::

## Project Oriented Workflow

<br>

:::{.incremental}
-   Always start a document in a project folder
    -   That way you don't have to do `setwd`
    -   Also can share easily with other people
-   Go to File\>New Project
-   Create a Quarto project folder
:::

## Visual Editor

::: {.incremental}
-   There are two ways to edit Quarto docs
    -   Source (markdown)
    -   Visual editor
-   Visual editor
    -   WYSIWYM
    -   Approximates appearance
-   Try both and see what you like
:::

## Rendering Documents {.smaller}

::: {.incremental}
-   Rendering = converting to another format
    - Default format is HTML
    - Can also render to PDF, Word, etc. 
-   To render a Quarto document
    -   Click on the Render button
        -   Or keyboard shortcut (Cmd/Ctrl + Shift + K)
-   By default, Quarto will preview the document in your browser
-   But you can also preview in Viewer pane
    - Click on the gear icon next to the Render button
    - Select "Preview in Viewer Pane"
:::

## Illustration

![](images/intro_quarto.gif){fig-align="center"}

## Let's Try Quarto!

-   Create a new Quarto document
    -   File\>New File\>Quarto Document
-   Save the document in your project folder
-   Render it
    -   Click on the Render button
    -   Or keyboard shortcut (Cmd/Ctr + Shift + K)
-   Try out the visual editor

```{r}
#| label: timer1
library(countdown)
countdown(minutes = 2, 
          id = "timer1", 
          top = "0%",
          right = "5%",
          color_border = "#fff",
          color_text = "#fff",
          color_running_background = "#42affa",
          color_running_text = "black",
          color_finished_background = "#E5D19D",
          color_finished_text = "#00264A")
```

# Quarto Docs

## Document Elements

<br>

-   YAML Header
-   Markdown content
-   Code chunks

## YAML Header

<br>

-   Metadata about the document
    -   Title, author, date, etc.
-   Output format
-   Execution options

## YAML Header

```         
---
title: "My Documnet"
author: "Your Name"
date: today
date-format: long
format: html
execute:
  echo: false
  message: false
---
```
 - Try changing some of these options in your document
 - Then render it again
 - Look in the Quarto [guide](https://quarto.org/docs/reference/formats/html.html) for other options to try

```{r}
#| label: timer3

countdown(minutes = 2, 
          id = "timer3", 
          bottom = "0%",
          right = "5%")
```

## Markdown

<br>

::: {.incremental}
-   Markdown is a simple markup language
-   You can use it to format text
-   You can also use it to embed images, tables, etc.
-   And to embed code chunks...
:::

## Markdown Syntax - Basic Authoring

::: {.incremental}
-   For basic text you can just start typing
-   For line breaks use two spaces and return (enter)
-   Headings (use `#`, `##`, `###`, etc.)
    -   `#` is the largest heading (level 1)
    -   `##` is the next largest (level 2)
    -   `###` is the next largest (level 3)
    -   Etc.
:::

## Markdown Syntax - Styling

::: {.incremental}
-   Emphasis = Italics (use `*`)
    -   Bold (use `**`)
-   Lists
    -   Bullet points (use `-`)
    -   Numbered lists (use `1.`)
:::

## Markdown Syntax - Content

::: {.incremental}
-   Links (use `[text](url)`)
-   Images (use `![](file path or url)`)
-   Code chunks
    -   R code chunks (\`\`\`{r}...\`\`\`)
    -   Python code chunks (\`\`\`{python}...\`\`\`)
    -   Etc. 
:::

## Try Some Markdown

<br>

-   Check out the [Markdown Cheatsheet](https://www.markdownguide.org/basic-syntax/)
-   Try editing the markdown in your document
-   Try some of the other things you find in the guide
-   Then render it again

```{r}
#| label: timer4

countdown(minutes = 5, 
          id = "timer4", 
          bottom = "10%",
          right = "10%")
```

## Code Chunks

::: {.incremental}
-   Incorporate R code (could also be Python, Julia, etc.)
-   Add a code chunk with the '+' button
-   Run the code chunk by clicking the play button
    -   Or use keyboard shortcut (Cmd/Ctrl + Shift + Enter)
-   Run all chunks up that point by clicking the down arrow
    -   Or use keyboard shortcut (Cmd/Ctrl + Shift + K)
-  Run a single line with shortcut (Cmd/Ctrl + Enter) 
:::

## Code Chunk Options

::: {.incremental}
-   Use `#|` (hash-pipe) to add options 
-   `label` is a unique identifier for the chunk
-   Options to control what happens when you render
    -   `echo` controls whether the code is shown
    -   `eval` controls whether the code is run
    -   `message` controls whether messages are shown
    -   `warning` controls whether warnings are shown
:::

## Code Chunk Options

<br>

-   Code-chunk options override global options set in YAML header
-   See [documentation](https://quarto.org/docs/reference/cells/cells-knitr.html) for more options
-   You can also use write chunk options inline with chunk name,
    -   e.g., `{r, echo = FALSE} ...`
    
## Illustration

![](images/code-chunks.gif){fig-align="center"}

## Try it Yourself! 

-  Create a code chunk
-  Copy this code chunk into your document

```{r}
#| label: chunk1
#| echo: true
#| eval: false
#| 
library(ggplot2)

ggplot(mpg, aes(displ, hwy, colour = class)) + 
  geom_point()
```

-  Try adding some chunk options in your document
-  Then render it again

```{r}
#| label: timer5

countdown(minutes = 2, 
          id = "timer5", 
          bottom = "10%",
          right = "10%")
```

# A Bit About R

## R Packages and Functions {.smaller}

<br>

::: {.incremental}
-   A *function* is a set of instructions
    -   `read_csv()` is a function
    -   `ggplot()` is a function
-   A *package* is a collection of functions
    -   `readr` is a package that contains the `read_csv()` function
    -   `ggplot2` is a package that contains the `ggplot()` function
-   Use `install.packages()` to install packages
-   Use `library()` to load packages
-   You can install packages from CRAN
:::

## The Tidyverse {.smaller}

::: {.incremental}
-   The Tidyverse is a collection of data science packages
-   It is also considered a dialect of R
-   In this class, we will be using many Tidyverse packages
    -   `ggplot2` for data visualization
    -   `readr` for reading data
    -   `dplyr` for data manipulation
    -   `tidyr` for data tidying
    -   Etc.
-   At first we will load the packages independently, e.g. `library(ggplot2)`
-   Later we will load them all at once with `library(tidyverse)`
:::
